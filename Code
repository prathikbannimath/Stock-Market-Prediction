#importing libraries
import math
import pandas as pd
import pandas_datareader as pdd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#Get the Stock Quote
df = pdd.DataReader('AAPL', data_source = 'yahoo', start = '2012-01-01', end = '2019-12-17')
#show the data
df.head() 

#getting the number of shows and colums
df.shape

# Visualize the close price history
plt.figure(figsize=(16,8))
plt.title('Close Price Movement',fontsize=20)
plt.plot(df['Close'])
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD', fontsize = 18)
plt.show

#Create a new dataframe with only 'Close Colum'
data = df.filter(['Close'])
dataset = data.values
#Get the number of rows to train the model on
training_data_len = math.ceil( len(dataset)* .8)
training_data_len

# Normalise the data to values between 0 and 1 (Scaling the data)
scaler= MinMaxScaler(feature_range = (0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

# Specifying the shape of the input. Lshm must be in 3d (Creating the scaled dataset)
train_data = scaled_data[0:training_data_len, :]
#splitting the training set into x variable and y variable
x_train = []
y_train = []
for i in range(60, len(train_data)):
  x_train.append(train_data[i-60: i])
  y_train.append(train_data[i,0])
  if i<=61:
    print(x_train)
    print(y_train)
    print()
    
    # converge x_train and y_train to numpy array  to train the lshm model
x_train, y_train = np.array(x_train), np.array(y_train)
#reshaping the data 
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_train.shape

#Building The LSTM model
model = Sequential()
model.add(LSTM (50, return_sequences = True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM (50, return_sequences = False))
model.add(Dense(25))
model.add(Dense(1))

# Compile the model
model.compile(optimizer = 'adam' , loss = 'mean_squared_error')

#Training the model
model.fit(x_train, y_train, batch_size = 1, epochs = 1)

 Creating the testing Dataset
#creating New array containing saled values from index 1543 to 2003
test_data = scaled_data[training_data_len - 60: , :]\
# create the dataset x_tests and y_tests
x_test = []
y_test = dataset[training_data_len : , :]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60 : i, 0])
  
  #Convert data to numpy array
x_test = np.array(x_test)


#Reshaping the data
x_test = np.reshape(x_test,(x_test.shape[0], x_test.shape[1], 1))

#Gettinmg the model predicted prive valuies
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Getiing the root mean square error (RMSE)
rmse = np.sqrt ( np.mean(predictions - y_test)**2)
rmse

#plotting the data
train = data[ :training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#visualizingt the data
plt.figure(figsize= (16,8))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price in USD', fontsize = 18)
plt.plot(train['Close'])
plt.plot(valid[['Close', 'Predictions']])
plt.legend(['Train', 'Val' , 'Predictions'] , loc = 'lower right')
plt.show

# Shoe the valid or Actuall price and the preditcted Price
valid

